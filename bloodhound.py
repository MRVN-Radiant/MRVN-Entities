"""quick & dirty wrapper to retarget infiles & outfiles of bsp_tool_examples/fgd2ent.py"""

if __name__ == "__main__":
    from bsp_tool_examples.fgd2ent import *  # noqa

    header = """<?xml version="1.0"?>
<!--
    Titanfall 2 entity definitions for MRVN-radiant
        Generated by MRVN-entities
        Spawnpoint, hardpoint, ctf flag & zipline definitions by catornot (2022-11-2)
        Bounding Boxes and Models by snake-biscuits (2022-11-6)
-->
<!-- TODO:
    Identify broken / unused / unimplemented keys
    Test if Titanfall can handle missing entity keys (some scripts might complain)
-->
<classes>
<!--
=============================================================================
 OPTION KEY TYPES
=============================================================================
-->\n"""

    footer = """</classes>"""

    maps = dict()
    # TODO: allow recursion to load every Apex Legends Season at once
    outdir = input("INPUT: sub-folder of generated for output (e.g. r1): ")
    os.makedirs(f"generated/{outdir}", exist_ok=True)
    md_count = int(input("INPUT: number of map directories: "))
    for i in range(md_count):
        md = input(f"INPUT: map directory #{i}: ")
        print("Searching...")
        im = {os.path.join(md, m): None for m in fnmatch.filter(os.listdir(md), "*.bsp")}
        print(f"Found {len(im)} maps")
        maps.update(im)
    del im  # reduce memory costs?
    print(f"Loading all {len(maps)} maps...")
    maps = {m: bsp_tool.load_bsp(m) for m in maps}
    print(len(maps), "Loaded!")

    fgd_path = input("INPUT: .fgd file to search for definitions: ")
    print("Loading fgd...")
    fgd = valvefgd.FgdParse(fgd_path)
    print("Loaded!")

    # all Titanfall Entity Lumps
    ent_blocks = ("ENTITIES", *(f"ENTITIES_{x}" for x in ("env", "fx", "script", "spawn", "snd")))

    print("Gathering entity classnames...")
    all_classnames = collections.defaultdict(set)
    for bsp in maps.values():
        for block in ent_blocks:
            for entity in getattr(bsp, block):
                all_classnames[block].add(entity["classname"])
                # TODO: catch unique editorclass & spawnclass

    for block in ent_blocks:
        print(len(all_classnames[block]), "classnames found in", block)

    for block in ent_blocks:
        print(f"Batching {block}...")
        choice_types, ents = batch(maps, fgd, all_classnames[block])
        print(f"Writing {outdir}/{block}.xml...")
        with open(f"generated/{outdir}/{block}.xml", "w") as ent_file:
            ent_file.write(header + "\n")
            ent_file.write("\n\n".join([f"<!-- used by {', '.join(v)} -->\n{k}" for k, v in choice_types.items()]))
            ent_file.write("""\n<!--
=============================================================================
 ENTITIES IN ALPHABETICAL ORDER
=============================================================================
-->\n""")
            ent_file.write("\n\n".join(ents))
            ent_file.write("\n</classes>\n")
        print("Done!")
    print("Finished!")